# Создаем список городов
cities = ['Москва', 'Париж', 'Лондон']

# Выводим список городов до изменения
print(f'Список городов до изменения: {cities}')

# Итерируемся по списку городов
for i in range(len(cities)):
    # В каждой итерации в переменную i будет передаваться значение от 0 до 3 (длины списка)
    # Получаем элемент списка по индексу i и записываем в него новое значение, равное 'Город: ' + значение_элемента
    cities[i] = f'Город: {cities[i]}'

# Выводим список городов после изменения
print(f'Список городов после изменения: {cities}')

# Best Practice - управление памятью
# При создании переменной машина (т.е. компьютер) выделяет место под нее 
# в оперативной памяти. Чем больше переменных мы создаем, тем больше 
# памяти выделяется для работы программы. 
# Поэтому нужно очень обдуманно пользоваться переменными.


# Обход словаря

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}

for key in student:
    print(key)
    print(student[key])

# Поскольку словарь содержит ключ-значение, 
# то в Python есть соответствующие методы для получения всех ключей 
# или всех значений или всех элементов.

# keys() (от англ. key - ключ) - получить все ключи словаря;
# values() (от англ. value - значение) - получить все значения словаря;
# items() (от англ. item - элемент) - получить все элементы словаря.

# Обход словаря по элементам
student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}

for key, value in student.items():
    print(f'Ключ = {key}')
    print(f'Значение = {value}')

# Best Practice - сокращения
# При обходе словаря по элементам принято называть переменные 
# цикла k и v (сокращение от key и value)!