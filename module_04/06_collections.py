'''Анализ данных с помощью модуля collections
Задачи выбора максимального и минимального значения из списка встречаются 
достаточно часто. Мы уже рассматривали нахождение самого частопродаваемого товара - 
для этого мы обходили список значений и складывали сколько раз в нем встречается 
тот или иной товар. Мы решали задачу именно таким путем, чтобы закрепить 
на практике умение работать со списками, словарями, циклами и условиями. 
Но в реальных проектах в индустрии для решения таких задач используется 
модуль collections.
Не изобретать велосипед! Наиболее частая ошибка начинающих программистов Python в том, 
что они как раз используют циклы, чтобы пробегать по спискам словарей 
и искать максимальные, минимальные или часто используемые значения. 
Для этого в Python есть модуль из коробки - collections.
Задача: найти самую часто встречающуюся букву в предложении “Москва слезам не верит”.
Не правильное решение: циклом обойти строку и посчитать сколько раз встречается 
каждая буква. Затем найти максимальное значение.
Правильное решение: воспользуемся модулем collections'''

import collections


# Объявляем входящую строку
input_string = 'Москва слезам не верит'

# Создаем список из букв
letter_list = list(input_string)

# Создаем переменную letter_counter, используя объект Counter из модуля collections
# В объект Counter передаем список букв
letter_counter = collections.Counter(letter_list)

# Выведем результат
print(letter_counter)

# Мы можем обращаться к этому словарю по ключам: letter_counter['а'] выдаст 1, 
# letter_counter['в'] выдаст 2, letter_counter['г'] выдаст 0 потому что такого ключа нет, 
# при этом ошибки, что ключ не найден выдаваться не будет:
print(f"Повторов буквы а: {letter_counter['а']}")
print(f"Повторов буквы б: {letter_counter['б']}")
print(f"Повторов буквы в: {letter_counter['в']}")
print(f"Повторов буквы г: {letter_counter['г']}")

# Чтобы найти максимальное значение, у объекта Counter есть метод most_common, 
# который выдает наиболее популярные значения. Добавь в конец файла строку:
print(letter_counter.most_common(1))
# Вернулся список в котором 1 кортеж. Саму букву мы можем получить так:
# letter_counter.most_common(1)[0][0]
# Первый 0 в квадратных скобках - это получение нулевого объекта из списка, 
# второй 0 в квадратных скобках - получение нулевого объекта из кортежа.

# В метод most_common передается количество - сколько популярных объектов нужно получить.
# Результат будет отсортирован по убыванию. Например, получим 2 самых популярных объекта:
print(letter_counter.most_common(2))