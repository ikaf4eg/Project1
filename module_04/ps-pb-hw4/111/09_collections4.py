# Именованные кортежи
# Мы помним, что в Python есть такой тип как кортеж - создается в круглых скобках () 
# и его значение нельзя менять, используется для оптимизации работы с памятью. 
# В модуле collections есть именованные кортежи - namedtuple

from collections import namedtuple

'''Во второй строке кода мы создаем некое описание (или структуру) объекта student 
с помощью namedtuple. В данном описании первый параметр - это так называемое имя класса, 
обычно оно равно имени переменной. Второй параметр - это строка, в которой через 
пробел мы передаем свойства нашего объекта (или поля структуры). 
Наш объект студент будет иметь 3 свойства'''
# Создаем описание (т.е. некую структуру) для объекта
student = namedtuple('student','first_name last_name age')

'''Затем мы создаем сам объект, используя наше описание. 
Для этого в скобках указываем имена полей структуры. 
После чего можно будет обращаться к полям объекта через точку'''
# Создаем сам объект, используя описание
student1 = student(first_name='Иван', last_name='Иванов', age=18)

# Обращаемся к полям объекта через точку
print(student1.first_name)
print(student1.last_name)
print(student1.age)

#Получился аналог словаря, но обращаться к ключам уже нужно не через квадратные скобки, 
# а просто через точку.
# Именованный кортеж - эффективный тип данных для оптимизации работы с памятью. 
# В случае со словарем мы можем добавлять произвольное количество новых ключей. 
# Но в случае с именованным кортежем - мы не сможем добавить новое поле в объект 
# т.е. следующий код выдаст ошибку:

# Обращаемся к несуществующему полю
# print(student1.age1)

# По этой причине Python выделяет меньше памяти при работе с именованным кортежем 
# и больше памяти при работе со словарем. Поэтому, если у вас есть структура, 
# поля которой точно не будут меняться в ходе выполнения программы, 
# то оптимальнее использовать именованный кортеж, а не словарь.